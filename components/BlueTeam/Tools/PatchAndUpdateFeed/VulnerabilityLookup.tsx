"use client";

import React, { useState } from "react";
import { cveTipsOne, cveTipsTwo } from "./cveTips.js";

// type Props = {};

type CVE_Object = {
  cve_id: string;
  summary: string;
  cvss: number;
  cvss_version: number;
  cvss_v2: number;
  cvss_v3: number;
  epss: number;
  ranking_epss: number;
  kev: boolean;
  propose_action: string;
  ransomware_campaign: string;
  references: string[];
  published_time: string;
};

export default function VulnerabilityLookup() {
  const [loading, setLoading] = useState(false);
  const [resultMessage, setResultMessage] = useState("");
  const [searchBy, setSearchBy] = useState("");
  const [vulnData, setVulnData] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");

  const CVETestValue = [
    {
      cve_id: "CVE-2024-8974",
      summary:
        'Information disclosure in Gitlab EE/CE affecting all versions from 15.6 prior to 17.2.8, 17.3 prior to 17.3.4, and 17.4 prior to 17.4.1 in specific conditions it was possible to disclose to an unauthorised user the path of a private project."',
      cvss: 2.6,
      cvss_version: 3,
      cvss_v2: null,
      cvss_v3: 2.6,
      epss: null,
      ranking_epss: null,
      kev: false,
      propose_action: null,
      ransomware_campaign: null,
      references: ["https://gitlab.com/gitlab-org/gitlab/-/issues/482843"],
      published_time: "2024-09-26T23:15:03",
    },
    {
      cve_id: "CVE-2024-4099",
      summary:
        "An issue has been discovered in GitLab EE affecting all versions starting from 16.0 prior to 17.2.8, from 17.3 prior to 17.3.4, and from 17.4 prior to 17.4.1. An AI feature was found to read unsanitized content in a way that could have allowed an attacker to hide prompt injection.",
      cvss: 3.1,
      cvss_version: 3,
      cvss_v2: null,
      cvss_v3: 3.1,
      epss: null,
      ranking_epss: null,
      kev: false,
      propose_action: null,
      ransomware_campaign: null,
      references: [
        "https://gitlab.com/gitlab-org/gitlab/-/issues/457798",
        "https://hackerone.com/reports/2459597",
      ],
      published_time: "2024-09-26T23:15:02",
    },
    {
      cve_id: "CVE-2024-47076",
      summary:
        "CUPS is a standards-based, open-source printing system, and `libcupsfilters` contains the code of the filters of the former `cups-filters` package as library functions to be used for the data format conversion tasks needed in Printer Applications. The `cfGetPrinterAttributes5` function in `libcupsfilters` does not sanitize IPP attributes returned from an IPP server. When these IPP attributes are used, for instance, to generate a PPD file, this can lead to attacker controlled data to be provided to the rest of the CUPS system.",
      cvss: 8.6,
      cvss_version: 3,
      cvss_v2: null,
      cvss_v3: 8.6,
      epss: null,
      ranking_epss: null,
      kev: false,
      propose_action: null,
      ransomware_campaign: null,
      references: [
        "https://github.com/OpenPrinting/cups-browsed/security/advisories/GHSA-rj88-6mr5-rcw8",
        "https://github.com/OpenPrinting/cups-filters/security/advisories/GHSA-p9rh-jxmq-gq47",
        "https://github.com/OpenPrinting/libcupsfilters/security/advisories/GHSA-w63j-6g73-wmg5",
        "https://github.com/OpenPrinting/libppd/security/advisories/GHSA-7xfx-47qg-grp6",
        "https://www.cups.org",
        "https://www.evilsocket.net/2024/09/26/Attacking-UNIX-systems-via-CUPS-Part-I",
      ],
      published_time: "2024-09-26T22:15:04",
    },
    ,
    {
      cve_id: "CVE-2024-47076",
      summary:
        "CUPS is a standards-based, open-source printing system, and `libcupsfilters` contains the code of the filters of the former `cups-filters` package as library functions to be used for the data format conversion tasks needed in Printer Applications. The `cfGetPrinterAttributes5` function in `libcupsfilters` does not sanitize IPP attributes returned from an IPP server. When these IPP attributes are used, for instance, to generate a PPD file, this can lead to attacker controlled data to be provided to the rest of the CUPS system.",
      cvss: 8.6,
      cvss_version: 3,
      cvss_v2: null,
      cvss_v3: 8.6,
      epss: null,
      ranking_epss: null,
      kev: false,
      propose_action: null,
      ransomware_campaign: null,
      references: [
        "https://github.com/OpenPrinting/cups-browsed/security/advisories/GHSA-rj88-6mr5-rcw8",
        "https://github.com/OpenPrinting/cups-filters/security/advisories/GHSA-p9rh-jxmq-gq47",
        "https://github.com/OpenPrinting/libcupsfilters/security/advisories/GHSA-w63j-6g73-wmg5",
        "https://github.com/OpenPrinting/libppd/security/advisories/GHSA-7xfx-47qg-grp6",
        "https://www.cups.org",
        "https://www.evilsocket.net/2024/09/26/Attacking-UNIX-systems-via-CUPS-Part-I",
      ],
      published_time: "2024-09-26T22:15:04",
    },
    ,
    {
      cve_id: "CVE-2024-47076",
      summary:
        "CUPS is a standards-based, open-source printing system, and `libcupsfilters` contains the code of the filters of the former `cups-filters` package as library functions to be used for the data format conversion tasks needed in Printer Applications. The `cfGetPrinterAttributes5` function in `libcupsfilters` does not sanitize IPP attributes returned from an IPP server. When these IPP attributes are used, for instance, to generate a PPD file, this can lead to attacker controlled data to be provided to the rest of the CUPS system.",
      cvss: 8.6,
      cvss_version: 3,
      cvss_v2: null,
      cvss_v3: 8.6,
      epss: null,
      ranking_epss: null,
      kev: false,
      propose_action: null,
      ransomware_campaign: null,
      references: [
        "https://github.com/OpenPrinting/cups-browsed/security/advisories/GHSA-rj88-6mr5-rcw8",
        "https://github.com/OpenPrinting/cups-filters/security/advisories/GHSA-p9rh-jxmq-gq47",
        "https://github.com/OpenPrinting/libcupsfilters/security/advisories/GHSA-w63j-6g73-wmg5",
        "https://github.com/OpenPrinting/libppd/security/advisories/GHSA-7xfx-47qg-grp6",
        "https://www.cups.org",
        "https://www.evilsocket.net/2024/09/26/Attacking-UNIX-systems-via-CUPS-Part-I",
      ],
      published_time: "2024-09-26T22:15:04",
    },
    ,
    {
      cve_id: "CVE-2024-47076",
      summary:
        "CUPS is a standards-based, open-source printing system, and `libcupsfilters` contains the code of the filters of the former `cups-filters` package as library functions to be used for the data format conversion tasks needed in Printer Applications. The `cfGetPrinterAttributes5` function in `libcupsfilters` does not sanitize IPP attributes returned from an IPP server. When these IPP attributes are used, for instance, to generate a PPD file, this can lead to attacker controlled data to be provided to the rest of the CUPS system.",
      cvss: 8.6,
      cvss_version: 3,
      cvss_v2: null,
      cvss_v3: 8.6,
      epss: null,
      ranking_epss: null,
      kev: false,
      propose_action: null,
      ransomware_campaign: null,
      references: [
        "https://github.com/OpenPrinting/cups-browsed/security/advisories/GHSA-rj88-6mr5-rcw8",
        "https://github.com/OpenPrinting/cups-filters/security/advisories/GHSA-p9rh-jxmq-gq47",
        "https://github.com/OpenPrinting/libcupsfilters/security/advisories/GHSA-w63j-6g73-wmg5",
        "https://github.com/OpenPrinting/libppd/security/advisories/GHSA-7xfx-47qg-grp6",
        "https://www.cups.org",
        "https://www.evilsocket.net/2024/09/26/Attacking-UNIX-systems-via-CUPS-Part-I",
      ],
      published_time: "2024-09-26T22:15:04",
    },
    ,
    {
      cve_id: "CVE-2024-47076",
      summary:
        "CUPS is a standards-based, open-source printing system, and `libcupsfilters` contains the code of the filters of the former `cups-filters` package as library functions to be used for the data format conversion tasks needed in Printer Applications. The `cfGetPrinterAttributes5` function in `libcupsfilters` does not sanitize IPP attributes returned from an IPP server. When these IPP attributes are used, for instance, to generate a PPD file, this can lead to attacker controlled data to be provided to the rest of the CUPS system.",
      cvss: 8.6,
      cvss_version: 3,
      cvss_v2: null,
      cvss_v3: 8.6,
      epss: null,
      ranking_epss: null,
      kev: false,
      propose_action: null,
      ransomware_campaign: null,
      references: [
        "https://github.com/OpenPrinting/cups-browsed/security/advisories/GHSA-rj88-6mr5-rcw8",
        "https://github.com/OpenPrinting/cups-filters/security/advisories/GHSA-p9rh-jxmq-gq47",
        "https://github.com/OpenPrinting/libcupsfilters/security/advisories/GHSA-w63j-6g73-wmg5",
        "https://github.com/OpenPrinting/libppd/security/advisories/GHSA-7xfx-47qg-grp6",
        "https://www.cups.org",
        "https://www.evilsocket.net/2024/09/26/Attacking-UNIX-systems-via-CUPS-Part-I",
      ],
      published_time: "2024-09-26T22:15:04",
    },
    ,
    {
      cve_id: "CVE-2024-47076",
      summary:
        "CUPS is a standards-based, open-source printing system, and `libcupsfilters` contains the code of the filters of the former `cups-filters` package as library functions to be used for the data format conversion tasks needed in Printer Applications. The `cfGetPrinterAttributes5` function in `libcupsfilters` does not sanitize IPP attributes returned from an IPP server. When these IPP attributes are used, for instance, to generate a PPD file, this can lead to attacker controlled data to be provided to the rest of the CUPS system.",
      cvss: 8.6,
      cvss_version: 3,
      cvss_v2: null,
      cvss_v3: 8.6,
      epss: null,
      ranking_epss: null,
      kev: false,
      propose_action: null,
      ransomware_campaign: null,
      references: [
        "https://github.com/OpenPrinting/cups-browsed/security/advisories/GHSA-rj88-6mr5-rcw8",
        "https://github.com/OpenPrinting/cups-filters/security/advisories/GHSA-p9rh-jxmq-gq47",
        "https://github.com/OpenPrinting/libcupsfilters/security/advisories/GHSA-w63j-6g73-wmg5",
        "https://github.com/OpenPrinting/libppd/security/advisories/GHSA-7xfx-47qg-grp6",
        "https://www.cups.org",
        "https://www.evilsocket.net/2024/09/26/Attacking-UNIX-systems-via-CUPS-Part-I",
      ],
      published_time: "2024-09-26T22:15:04",
    },
  ];

  const handleVulnSearch = async () => {
    setLoading(true);

    try {
      const data = {
        searchBy: searchBy,
        searchQuery: searchQuery,
      };

      const res = await fetch("/api/vuln/search", {
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        method: "POST",
        body: JSON.stringify(data),
      });
      const result = await res.json();
      if (res.ok) {
        console.log("OK");
        if (result.body.cves !== undefined) {
          setVulnData(result.body.cves);
        } else {
          const singleCVEList: any = [result.body];
          setVulnData(singleCVEList);
        }

        if (result.body.cves === undefined || result.body.cves.length == 0) {
          setResultMessage("Nothing Found...Contact Admin");
        } else {
          setResultMessage("");
        }
      }
    } catch {
      console.log("Search Failed");
    }

    setLoading(false);
  };

  return (
    <div className="p-4">
      <div className="flex">
        <div className="basis-2/4">
          <div className="">
            <h1 className="text-4xl text-white">Vulnerability Search</h1>
          </div>
          <div className="max-w-lg  py-2">
            <label className="input input-bordered flex items-center gap-2">
              <input
                type="text"
                className="grow input-bordered input-info "
                placeholder="Vulnerability Search"
                value={searchQuery}
                onChange={(event) => setSearchQuery(event.target.value)}
              />
            </label>
          </div>

          <div className="py-2">
            <select
              className="select select-info w-full max-w-xs"
              onChange={(event) => setSearchBy(event.target.value)}
            >
              <option disabled selected>
                Search By Category
              </option>
              <option>CPE23</option>
              <option>Product</option>
              <option>CVE</option>
            </select>
          </div>

          <div>
            <button
              className="btn btn-outline btn-info"
              onClick={handleVulnSearch}
            >
              {searchQuery
                ? "Search Vulnerability"
                : "Click For Most Recent Vulnerability"}
            </button>
          </div>
        </div>

        <div className="basis-2/4 max-md:hidden overflow-x-auto max-h-48">
          <div className="flex justify-center py-4">
            <h1 className="text-4xl text-white">Tips to Using CVE</h1>
          </div>
          <article className="text-wrap overflow-x-auto max-h-48">
            <div className="divider divider-info text-white">
              <p>
                Benefits of Using CVE-Compatible Products and Services (Credit -
                cve.mitre.org){" "}
              </p>
            </div>
            <div className="overflow-y-auto h-96 text-white">
              {cveTipsOne.map((tip, index) => (
                <div key={index} className="py-2">
                  <p className="text-lg">{tip}</p>
                </div>
              ))}
            </div>

            <div className="divider divider-info text-white">
              <p>
                Benefits of Making Your Products and Services CVE-Compatible
                (Credit - cve.mitre.org){" "}
              </p>
            </div>
            <div className="overflow-y-auto h-96 text-white">
              {cveTipsTwo.map((tip, index) => (
                <div key={index} className="py-2">
                  <p className="text-lg">{tip}</p>
                </div>
              ))}
            </div>
          </article>
        </div>
      </div>

      <div className="py-2">
        <div className="overflow-x-auto overflow-y-scroll max-h-screen">
          <table className="table table-zebra bg-black">
            {/* Table Heading */}
            <thead>
              <tr>
                <th></th>
                <th>CVE ID</th>
                <th>Date</th>
                <th>Summary</th>
                <th>CVSS</th>
                <th>CVSS Version 2 Score</th>
                <th>CVSS Version 3 Score</th>
                <th>CVSS Version</th>

                <th>EPSS</th>
                <th>EPSS Ranking</th>
                <th>Kev</th>
                <th>Proposed Action</th>
                <th>Ransomware Campaign</th>
                <th>References</th>
              </tr>
            </thead>
            <tbody>
              {vulnData &&
                vulnData.map((cve: any, index: number) => (
                  <tr key={index} className="text-white">
                    <th>{index}</th>
                    <td>{cve.cve_id}</td>
                    <td>{cve.published_time}</td>

                    <td>{cve.summary || "None"}</td>
                    <td>{cve.cvss || "None"}</td>
                    <td>{cve.cvss_v2 || "None"}</td>
                    <td>{cve.cvss_v3 || "None"}</td>
                    <td>{cve.cvss_version || "None"}</td>

                    <td>{cve.epss || "None"}</td>
                    <td>{cve.ranking_epss || "None"}</td>
                    <td>{cve.kev || "None"}</td>
                    <td>{cve.propose_action || "None"}</td>
                    <td>{cve.ransomware_campaign || "None"}</td>
                    <td>
                      {cve.references.map(
                        (reference: string, index: number) => (
                          <div key={index}>
                            {index + 1}.) {reference}
                          </div>
                        )
                      )}
                    </td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
