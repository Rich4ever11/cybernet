"use client";

import React, { useState } from "react";
import { cveTipsOne, cveTipsTwo } from "./cveTips.js";

// type Props = {};

type CVE_Object = {
  cve_id: string;
  summary: string;
  cvss: number;
  cvss_version: number;
  cvss_v2: number;
  cvss_v3: number;
  epss: number;
  ranking_epss: number;
  kev: boolean;
  propose_action: string;
  ransomware_campaign: string;
  references: string[];
  published_time: string;
};

export default function VulnerabilityLookup() {
  const [loading, setLoading] = useState(false);
  const [resultMessage, setResultMessage] = useState("");
  const [searchBy, setSearchBy] = useState("");
  const [vulnData, setVulnData] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");

  const handleVulnSearch = async () => {
    setLoading(true);

    try {
      const data = {
        searchBy: searchBy,
        searchQuery: searchQuery,
      };

      const res = await fetch("/api/vuln/search", {
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        method: "POST",
        body: JSON.stringify(data),
      });
      const result = await res.json();
      if (res.ok) {
        console.log("OK");
        if (result.body.cves !== undefined) {
          setVulnData(result.body.cves);
        } else {
          const singleCVEList: any = [result.body];
          setVulnData(singleCVEList);
        }

        if (result.body.cves === undefined || result.body.cves.length == 0) {
          setResultMessage("Nothing Found...Contact Admin");
        } else {
          setResultMessage("");
        }
      }
    } catch {
      console.log("Search Failed");
    }

    setLoading(false);
  };

  return (
    <div className="p-4">
      <div className="flex">
        <div className="basis-2/4">
          <div className="">
            <h1 className="text-4xl text-white">Vulnerability Search</h1>
          </div>
          <div className="max-w-lg  py-2">
            <label className="input input-bordered flex items-center gap-2">
              <input
                type="text"
                className="grow input-bordered input-info "
                placeholder="Vulnerability Search"
                value={searchQuery}
                onChange={(event) => setSearchQuery(event.target.value)}
              />
            </label>
          </div>

          <div className="py-2">
            <select
              className="select select-info w-full max-w-xs"
              onChange={(event) => setSearchBy(event.target.value)}
            >
              <option disabled selected>
                Search By Category
              </option>
              <option>CPE23</option>
              <option>Product</option>
              <option>CVE</option>
            </select>
          </div>

          <div>
            <button
              className="btn btn-outline btn-info"
              onClick={handleVulnSearch}
            >
              {searchQuery
                ? "Search Vulnerability"
                : "Click For Most Recent Vulnerability"}
            </button>
          </div>
        </div>

        <div className="basis-2/4 max-md:hidden overflow-x-auto max-h-48">
          <div className="flex justify-center py-4">
            <h1 className="text-4xl text-white">Tips to Using CVE</h1>
          </div>
          <article className="text-wrap overflow-x-auto max-h-48">
            <div className="divider divider-info text-white">
              <p>
                Benefits of Using CVE-Compatible Products and Services (Credit -
                cve.mitre.org){" "}
              </p>
            </div>
            <div className="overflow-y-auto h-96 text-white">
              {cveTipsOne.map((tip, index) => (
                <div key={index} className="py-2">
                  <p className="text-lg">{tip}</p>
                </div>
              ))}
            </div>

            <div className="divider divider-info text-white">
              <p>
                Benefits of Making Your Products and Services CVE-Compatible
                (Credit - cve.mitre.org){" "}
              </p>
            </div>
            <div className="overflow-y-auto h-96 text-white">
              {cveTipsTwo.map((tip, index) => (
                <div key={index} className="py-2">
                  <p className="text-lg">{tip}</p>
                </div>
              ))}
            </div>
          </article>
        </div>
      </div>

      <div className="py-2">
        <div className="overflow-x-auto overflow-y-scroll max-h-screen">
          <table className="table table-zebra bg-black">
            {/* Table Heading */}
            <thead>
              <tr>
                <th></th>
                <th>CVE ID</th>
                <th>Date</th>
                <th>Summary</th>
                <th>CVSS</th>
                <th>CVSS Version 2 Score</th>
                <th>CVSS Version 3 Score</th>
                <th>CVSS Version</th>

                <th>EPSS</th>
                <th>EPSS Ranking</th>
                <th>Kev</th>
                <th>Proposed Action</th>
                <th>Ransomware Campaign</th>
                <th>References</th>
              </tr>
            </thead>
            <tbody>
              {vulnData &&
                vulnData.map((cve: any, index: number) => (
                  <tr key={index} className="text-white">
                    <th>{index}</th>
                    <td>{cve.cve_id}</td>
                    <td>{cve.published_time}</td>

                    <td>{cve.summary || "None"}</td>
                    <td>{cve.cvss || "None"}</td>
                    <td>{cve.cvss_v2 || "None"}</td>
                    <td>{cve.cvss_v3 || "None"}</td>
                    <td>{cve.cvss_version || "None"}</td>

                    <td>{cve.epss || "None"}</td>
                    <td>{cve.ranking_epss || "None"}</td>
                    <td>{cve.kev || "None"}</td>
                    <td>{cve.propose_action || "None"}</td>
                    <td>{cve.ransomware_campaign || "None"}</td>
                    <td>
                      {cve?.references &&
                        cve.references.map(
                          (reference: string, index: number) => (
                            <div key={index}>
                              {index + 1}.) {reference}
                            </div>
                          )
                        )}
                    </td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
